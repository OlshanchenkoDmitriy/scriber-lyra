import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { 
  History as HistoryIcon,
  Search,
  Download,
  Trash2,
  Copy,
  Calendar,
  Globe,
  FileText
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface HistoryRecord {
  id: string;
  text: string;
  language: "ru" | "en";
  timestamp: Date;
  type: "speech" | "manual";
}

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
const mockHistory: HistoryRecord[] = [
  {
    id: "1",
    text: "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –°–µ–≥–æ–¥–Ω—è –º—ã –∏–∑—É—á–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.",
    language: "ru",
    timestamp: new Date("2024-01-15T10:30:00"),
    type: "speech"
  },
  {
    id: "2", 
    text: "Hello, this is a test message in English language. Today we are exploring new features of the speech recognition application.",
    language: "en",
    timestamp: new Date("2024-01-15T09:15:00"),
    type: "speech"
  },
  {
    id: "3",
    text: "–í–∞–∂–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –æ —Ä–∞–±–æ—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º. –ù—É–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.",
    language: "ru",
    timestamp: new Date("2024-01-14T16:45:00"),
    type: "manual"
  },
  {
    id: "4",
    text: "Meeting notes: Discuss project timeline and deliverables for next quarter.",
    language: "en", 
    timestamp: new Date("2024-01-14T14:20:00"),
    type: "manual"
  },
  {
    id: "5",
    text: "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫: –º–æ–ª–æ–∫–æ, —Ö–ª–µ–±, —Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —É–∂–∏–Ω–∞.",
    language: "ru",
    timestamp: new Date("2024-01-13T12:00:00"),
    type: "speech"
  }
];

export const History = () => {
  const [records] = useState<HistoryRecord[]>(mockHistory);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedLanguage, setSelectedLanguage] = useState<"all" | "ru" | "en">("all");
  const [selectedType, setSelectedType] = useState<"all" | "speech" | "manual">("all");
  const { toast } = useToast();

  const filteredRecords = records.filter(record => {
    const matchesSearch = record.text.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesLanguage = selectedLanguage === "all" || record.language === selectedLanguage;
    const matchesType = selectedType === "all" || record.type === selectedType;
    
    return matchesSearch && matchesLanguage && matchesType;
  });

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({ title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", description: "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞" });
  };

  const deleteRecord = (id: string) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    toast({ title: "–£–¥–∞–ª–µ–Ω–æ", description: "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏" });
  };

  const exportHistory = () => {
    const dataStr = JSON.stringify(filteredRecords, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = 'linguascribe-history.json';
    link.click();
    
    URL.revokeObjectURL(url);
    toast({ title: "–≠–∫—Å–ø–æ—Ä—Ç", description: "–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ–∞–π–ª" });
  };

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  const truncateText = (text: string, maxLength: number = 150) => {
    return text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
  };

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-secondary border-border">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <HistoryIcon className="w-5 h-5 text-primary" />
            <span>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          <div className="space-y-4">
            <div className="relative">
              <Search className="w-4 h-4 absolute left-3 top-3 text-muted-foreground" />
              <Input
                placeholder="–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 bg-background/50"
              />
            </div>
            
            <div className="flex flex-wrap gap-2">
              <div className="flex items-center space-x-2">
                <span className="text-sm font-medium">–Ø–∑—ã–∫:</span>
                <Badge 
                  variant={selectedLanguage === "all" ? "default" : "outline"}
                  className="cursor-pointer transition-smooth"
                  onClick={() => setSelectedLanguage("all")}
                >
                  –í—Å–µ
                </Badge>
                <Badge 
                  variant={selectedLanguage === "ru" ? "default" : "outline"}
                  className="cursor-pointer transition-smooth"
                  onClick={() => setSelectedLanguage("ru")}
                >
                  üá∑üá∫ RU
                </Badge>
                <Badge 
                  variant={selectedLanguage === "en" ? "default" : "outline"}
                  className="cursor-pointer transition-smooth"
                  onClick={() => setSelectedLanguage("en")}
                >
                  üá∫üá∏ EN
                </Badge>
              </div>
              
              <div className="flex items-center space-x-2">
                <span className="text-sm font-medium">–¢–∏–ø:</span>
                <Badge 
                  variant={selectedType === "all" ? "default" : "outline"}
                  className="cursor-pointer transition-smooth"
                  onClick={() => setSelectedType("all")}
                >
                  –í—Å–µ
                </Badge>
                <Badge 
                  variant={selectedType === "speech" ? "default" : "outline"}
                  className="cursor-pointer transition-smooth"
                  onClick={() => setSelectedType("speech")}
                >
                  –†–µ—á—å
                </Badge>
                <Badge 
                  variant={selectedType === "manual" ? "default" : "outline"}
                  className="cursor-pointer transition-smooth"
                  onClick={() => setSelectedType("manual")}
                >
                  –¢–µ–∫—Å—Ç
                </Badge>
              </div>
            </div>
            
            <div className="flex justify-between items-center">
              <p className="text-sm text-muted-foreground">
                –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {filteredRecords.length}
              </p>
              <Button variant="outline" size="sm" onClick={exportHistory}>
                <Download className="w-4 h-4 mr-1" />
                –≠–∫—Å–ø–æ—Ä—Ç
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π */}
      <div className="space-y-4">
        {filteredRecords.length === 0 ? (
          <Card className="bg-card border-border">
            <CardContent className="py-12 text-center">
              <FileText className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <p className="text-lg font-medium mb-2">–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p className="text-muted-foreground">
                {searchTerm ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" : "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"}
              </p>
            </CardContent>
          </Card>
        ) : (
          filteredRecords.map((record) => (
            <Card key={record.id} className="bg-card border-border hover:shadow-md transition-smooth">
              <CardContent className="p-4">
                <div className="flex justify-between items-start mb-3">
                  <div className="flex items-center space-x-2">
                    <Badge variant="outline">
                      {record.language === "ru" ? "üá∑üá∫ RU" : "üá∫üá∏ EN"}
                    </Badge>
                    <Badge variant={record.type === "speech" ? "secondary" : "outline"}>
                      {record.type === "speech" ? "–†–µ—á—å" : "–¢–µ–∫—Å—Ç"}
                    </Badge>
                  </div>
                  
                  <div className="flex items-center space-x-1">
                    <Button 
                      variant="ghost" 
                      size="sm"
                      onClick={() => copyToClipboard(record.text)}
                    >
                      <Copy className="w-4 h-4" />
                    </Button>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      onClick={() => deleteRecord(record.id)}
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
                
                <p className="text-foreground mb-3 leading-relaxed">
                  {truncateText(record.text)}
                </p>
                
                <div className="flex items-center text-sm text-muted-foreground">
                  <Calendar className="w-4 h-4 mr-1" />
                  {formatDate(record.timestamp)}
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>
    </div>
  );
};