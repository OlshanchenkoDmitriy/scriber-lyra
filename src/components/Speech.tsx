import { useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { 
  Mic, 
  MicOff, 
  Play, 
  Pause, 
  Save, 
  Copy,
  Volume2,
  Settings
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export const Speech = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [transcribedText, setTranscribedText] = useState("");
  const [detectedLanguage, setDetectedLanguage] = useState<"ru" | "en" | null>(null);
  const [recordingTime, setRecordingTime] = useState(0);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const { toast } = useToast();

  // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç Google Speech-to-Text –∏–ª–∏ OpenAI Whisper)
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      
      const audioChunks: Blob[] = [];
      
      mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
      };
      
      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
        await processAudio(audioBlob);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
        stream.getTracks().forEach(track => track.stop());
      };
      
      mediaRecorder.start();
      setIsRecording(true);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      intervalRef.current = setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
      
      toast({ title: "–ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞", description: "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω..." });
    } catch (error) {
      toast({ 
        title: "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞", 
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É",
        variant: "destructive"
      });
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      setIsProcessing(true);
      
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      
      toast({ title: "–û–±—Ä–∞–±–æ—Ç–∫–∞", description: "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏..." });
    }
  };

  const processAudio = async (audioBlob: Blob) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Speech-to-Text –∏–ª–∏ OpenAI Whisper
    // –°–µ–π—á–∞—Å —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    setTimeout(() => {
      const mockTexts = [
        { text: "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ", lang: "ru" as const },
        { text: "Hello, this is a test message in English language", lang: "en" as const },
        { text: "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º", lang: "ru" as const },
        { text: "This application supports real-time speech recognition", lang: "en" as const }
      ];
      
      const randomText = mockTexts[Math.floor(Math.random() * mockTexts.length)];
      setTranscribedText(randomText.text);
      setDetectedLanguage(randomText.lang);
      setIsProcessing(false);
      setRecordingTime(0);
      
      toast({ 
        title: "–ì–æ—Ç–æ–≤–æ", 
        description: `–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω (${randomText.lang === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'})` 
      });
    }, 2000);
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(transcribedText);
    toast({ title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", description: "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞" });
  };

  const saveToHistory = () => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    toast({ title: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", description: "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é" });
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-secondary border-border">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Volume2 className="w-5 h-5 text-primary" />
            <span>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–ø–∏—Å–∏ */}
          <div className="flex flex-col items-center space-y-4">
            <div className="relative">
              <Button
                size="lg"
                variant={isRecording ? "destructive" : "default"}
                onClick={isRecording ? stopRecording : startRecording}
                disabled={isProcessing}
                className={`w-20 h-20 rounded-full transition-all duration-300 ${
                  isRecording ? 'animate-pulse shadow-glow' : 'hover:scale-105'
                }`}
              >
                {isRecording ? (
                  <MicOff className="w-8 h-8" />
                ) : (
                  <Mic className="w-8 h-8" />
                )}
              </Button>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ */}
              {isRecording && (
                <div className="absolute -top-2 -right-2 w-6 h-6 bg-destructive rounded-full animate-pulse flex items-center justify-center">
                  <div className="w-3 h-3 bg-white rounded-full"></div>
                </div>
              )}
            </div>
            
            <div className="text-center">
              <p className="text-lg font-medium">
                {isRecording ? "–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å..." : 
                 isProcessing ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." : 
                 "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏"}
              </p>
              
              {(isRecording || recordingTime > 0) && (
                <Badge variant="outline" className="mt-2">
                  {formatTime(recordingTime)}
                </Badge>
              )}
            </div>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è */}
          {transcribedText && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium">–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</h3>
                <div className="flex items-center space-x-2">
                  {detectedLanguage && (
                    <Badge variant="secondary">
                      {detectedLanguage === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üá∏ English'}
                    </Badge>
                  )}
                  <Button variant="outline" size="sm" onClick={copyToClipboard}>
                    <Copy className="w-4 h-4" />
                  </Button>
                  <Button variant="outline" size="sm" onClick={saveToHistory}>
                    <Save className="w-4 h-4" />
                  </Button>
                </div>
              </div>
              
              <Textarea
                value={transcribedText}
                onChange={(e) => setTranscribedText(e.target.value)}
                className="min-h-[150px] bg-background/50 border-border"
                placeholder="–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å..."
              />
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-lg">
            <Settings className="w-4 h-4 text-primary" />
            <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">–Ø–∑—ã–∫–∏</label>
              <div className="flex flex-wrap gap-2">
                <Badge variant="outline" className="cursor-pointer hover:bg-primary hover:text-primary-foreground transition-smooth">
                  üá∑üá∫ –†—É—Å—Å–∫–∏–π
                </Badge>
                <Badge variant="outline" className="cursor-pointer hover:bg-primary hover:text-primary-foreground transition-smooth">
                  üá∫üá∏ English
                </Badge>
                <Badge variant="outline" className="cursor-pointer hover:bg-primary hover:text-primary-foreground transition-smooth">
                  üåê –ê–≤—Ç–æ
                </Badge>
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">–ö–∞—á–µ—Å—Ç–≤–æ</label>
              <div className="flex flex-wrap gap-2">
                <Badge variant="outline" className="cursor-pointer">–°—Ç–∞–Ω–¥–∞—Ä—Ç</Badge>
                <Badge variant="secondary" className="cursor-pointer">–ü—Ä–µ–º–∏—É–º</Badge>
              </div>
            </div>
          </div>
          
          <div className="text-sm text-muted-foreground">
            <p>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Google Speech-to-Text —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞</p>
            <p>‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ OpenAI Whisper API</p>
            <p>‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};