#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –∏–∑ –ø–∞–ø–∫–∏ icons
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import shutil
import glob
from pathlib import Path

def distribute_icons():
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∫–æ–Ω–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ icons –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º"""
    
    icons_folder = "icons"
    
    if not os.path.exists(icons_folder):
        print("‚ùå –ü–∞–ø–∫–∞ 'icons' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üìã –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'icons' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ icons
    icon_files = glob.glob(f"{icons_folder}/*.png")
    
    if not icon_files:
        print("‚ùå –í –ø–∞–ø–∫–µ 'icons' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã PNG —Ñ–∞–π–ª—ã!")
        print("üìã –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –≤ –ø–∞–ø–∫—É 'icons'")
        return False
    
    print(f"üé® –ù–∞–π–¥–µ–Ω–æ {len(icon_files)} –∏–∫–æ–Ω–æ–∫ –≤ –ø–∞–ø–∫–µ 'icons'")
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –Ω–∞ —Ü–µ–ª–µ–≤—ã–µ –ø–∞–ø–∫–∏
    icon_mappings = {
        # Android –∏–∫–æ–Ω–∫–∏
        "icon-mipmap-mdpi-48x48.png": "android/app/src/main/res/mipmap-mdpi/ic_launcher.png",
        "icon-mipmap-hdpi-72x72.png": "android/app/src/main/res/mipmap-hdpi/ic_launcher.png", 
        "icon-mipmap-xhdpi-96x96.png": "android/app/src/main/res/mipmap-xhdpi/ic_launcher.png",
        "icon-mipmap-xxhdpi-144x144.png": "android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png",
        "icon-mipmap-xxxhdpi-192x192.png": "android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png",
        
        # –í–µ–± –∏–∫–æ–Ω–∫–∏
        "icon-Favicon-32x32.png": "public/favicon.ico",
        "icon-Web Icon-192x192.png": "public/icon-192.png",
        
        # Play Store –∏–∫–æ–Ω–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        "icon-Play Store-512x512.png": "play-store-icon.png"
    }
    
    print("\nüîÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫...")
    
    distributed_count = 0
    not_found = []
    
    for icon_name, target_path in icon_mappings.items():
        source_path = os.path.join(icons_folder, icon_name)
        
        if os.path.exists(source_path):
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                target_dir = os.path.dirname(target_path)
                if target_dir:
                    os.makedirs(target_dir, exist_ok=True)
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É
                shutil.copy2(source_path, target_path)
                print(f"‚úÖ {icon_name} ‚Üí {target_path}")
                distributed_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {icon_name}: {e}")
        else:
            not_found.append(icon_name)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {distributed_count} –∏–∫–æ–Ω–æ–∫")
    print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {len(not_found)} –∏–∫–æ–Ω–æ–∫")
    
    if not_found:
        print(f"\nüìã –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏:")
        for icon in not_found:
            print(f"   - {icon}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Android –ø—Ä–æ–µ–∫—Ç
    if os.path.exists("android"):
        print(f"\nüì± Android –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω!")
        print(f"üéØ –ò–∫–æ–Ω–∫–∏ Android –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print(f"\n‚ö†Ô∏è  Android –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx cap add android")
    
    return distributed_count > 0

def create_web_manifest():
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç web app manifest —Å –Ω–æ–≤—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏"""
    
    manifest_path = "public/manifest.json"
    
    manifest_content = {
        "name": "LinguaScribe",
        "short_name": "LinguaScribe", 
        "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ –∏ –ø–µ—Å–µ–Ω",
        "start_url": "/",
        "display": "standalone",
        "background_color": "#1a1a1a",
        "theme_color": "#4a9eff",
        "icons": [
            {
                "src": "/icon-192.png",
                "sizes": "192x192",
                "type": "image/png"
            }
        ]
    }
    
    try:
        import json
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(manifest_content, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Web App Manifest –æ–±–Ω–æ–≤–ª–µ–Ω: {manifest_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ manifest: {e}")

def update_index_html():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç index.html –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫"""
    
    index_path = "index.html"
    
    if not os.path.exists(index_path):
        print(f"‚ö†Ô∏è  index.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        with open(index_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∫–æ–Ω–∫–∏
        icon_links = [
            '<link rel="icon" type="image/x-icon" href="/favicon.ico">',
            '<link rel="apple-touch-icon" href="/icon-192.png">',
            '<link rel="manifest" href="/manifest.json">'
        ]
        
        updated = False
        for link in icon_links:
            if link not in content:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ head
                if '<head>' in content and '</head>' in content:
                    head_start = content.find('<head>') + 6
                    content = content[:head_start] + '\n    ' + link + content[head_start:]
                    updated = True
        
        if updated:
            with open(index_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ index.html –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏–∫–æ–Ω–∫–∞–º–∏")
        else:
            print(f"‚úÖ index.html —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∫–æ–Ω–∫–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ index.html: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé® LinguaScribe - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫")
    print("=" * 60)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
    success = distribute_icons()
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±-—á–∞—Å—Ç—å
        create_web_manifest()
        update_index_html()
        
        print(f"\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"1. –°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: npm run build")
        print(f"2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ Android: npx cap sync android") 
        print(f"3. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ Android Studio: npx cap open android")
        print(f"4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∫–æ–Ω–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: npm run dev")
        
        print(f"\nüéØ –ò–∫–æ–Ω–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print(f"üì± Android: –∏–∫–æ–Ω–∫–∏ –≤ –ø–∞–ø–∫–∞—Ö mipmap-*")
        print(f"üåê Web: favicon.ico –∏ icon-192.png")
        print(f"üì¶ Play Store: play-store-icon.png")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∫–æ–Ω–∫–∏")
        print(f"üìã –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∫–æ–Ω–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'icons'")

if __name__ == "__main__":
    main() 