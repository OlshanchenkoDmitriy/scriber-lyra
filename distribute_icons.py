#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –∏–∑ –ø–∞–ø–∫–∏ icons
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import shutil
import glob
from pathlib import Path

def distribute_icons():
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∫–æ–Ω–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ new_icons –ø–æ –Ω—É–∂–Ω—ã–º –ø–∞–ø–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –ü—É—Ç–∏ –¥–ª—è Android –∏–∫–æ–Ω–æ–∫
    android_paths = {
        'ic_launcher-mdpi.png': 'android/app/src/main/res/mipmap-mdpi/ic_launcher.png',
        'ic_launcher-hdpi.png': 'android/app/src/main/res/mipmap-hdpi/ic_launcher.png',
        'ic_launcher-xhdpi.png': 'android/app/src/main/res/mipmap-xhdpi/ic_launcher.png',
        'ic_launcher-xxhdpi.png': 'android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png',
        'ic_launcher-xxxhdpi.png': 'android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png',
    }
    
    # –ü—É—Ç–∏ –¥–ª—è –∫—Ä—É–≥–ª—ã—Ö Android –∏–∫–æ–Ω–æ–∫
    android_round_paths = {
        'ic_launcher_round-mdpi.png': 'android/app/src/main/res/mipmap-mdpi/ic_launcher_round.png',
        'ic_launcher_round-hdpi.png': 'android/app/src/main/res/mipmap-hdpi/ic_launcher_round.png',
        'ic_launcher_round-xhdpi.png': 'android/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png',
        'ic_launcher_round-xxhdpi.png': 'android/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png',
        'ic_launcher_round-xxxhdpi.png': 'android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png',
    }
    
    # –ü—É—Ç–∏ –¥–ª—è Web –∏–∫–æ–Ω–æ–∫
    web_paths = {
        'icon-192.png': 'public/icon-192.png',
        'icon-512.png': 'public/icon-512.png',
        'favicon.ico': 'public/favicon.ico',
    }
    
    source_dir = 'new_icons'
    
    if not os.path.exists(source_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫...")
    
    # –ö–æ–ø–∏—Ä—É–µ–º Android –∏–∫–æ–Ω–∫–∏
    print("\nüì± –ö–æ–ø–∏—Ä—É—é Android –∏–∫–æ–Ω–∫–∏:")
    for source, destination in android_paths.items():
        source_path = os.path.join(source_dir, source)
        if os.path.exists(source_path):
            os.makedirs(os.path.dirname(destination), exist_ok=True)
            shutil.copy2(source_path, destination)
            print(f"  ‚úÖ {source} -> {destination}")
        else:
            print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∫—Ä—É–≥–ª—ã–µ Android –∏–∫–æ–Ω–∫–∏
    print("\nüîµ –ö–æ–ø–∏—Ä—É—é –∫—Ä—É–≥–ª—ã–µ Android –∏–∫–æ–Ω–∫–∏:")
    for source, destination in android_round_paths.items():
        source_path = os.path.join(source_dir, source)
        if os.path.exists(source_path):
            os.makedirs(os.path.dirname(destination), exist_ok=True)
            shutil.copy2(source_path, destination)
            print(f"  ‚úÖ {source} -> {destination}")
        else:
            print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º Web –∏–∫–æ–Ω–∫–∏
    print("\nüåê –ö–æ–ø–∏—Ä—É—é Web –∏–∫–æ–Ω–∫–∏:")
    for source, destination in web_paths.items():
        source_path = os.path.join(source_dir, source)
        if os.path.exists(source_path):
            os.makedirs(os.path.dirname(destination), exist_ok=True)
            shutil.copy2(source_path, destination)
            print(f"  ‚úÖ {source} -> {destination}")
        else:
            print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}")
    
    print("\nüéâ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run build")
    print("2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å Android: npx cap sync android")
    print("3. –°–æ–±–µ—Ä–∏—Ç–µ APK: cd android && .\\gradlew assembleDebug")

def create_web_manifest():
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç web app manifest —Å –Ω–æ–≤—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏"""
    
    manifest_path = "public/manifest.json"
    
    manifest_content = {
        "name": "LinguaScribe",
        "short_name": "LinguaScribe", 
        "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ –∏ –ø–µ—Å–µ–Ω",
        "start_url": "/",
        "display": "standalone",
        "background_color": "#1a1a1a",
        "theme_color": "#4a9eff",
        "icons": [
            {
                "src": "/icon-192.png",
                "sizes": "192x192",
                "type": "image/png"
            }
        ]
    }
    
    try:
        import json
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(manifest_content, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Web App Manifest –æ–±–Ω–æ–≤–ª–µ–Ω: {manifest_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ manifest: {e}")

def update_index_html():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç index.html –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫"""
    
    index_path = "index.html"
    
    if not os.path.exists(index_path):
        print(f"‚ö†Ô∏è  index.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        with open(index_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∫–æ–Ω–∫–∏
        icon_links = [
            '<link rel="icon" type="image/x-icon" href="/favicon.ico">',
            '<link rel="apple-touch-icon" href="/icon-192.png">',
            '<link rel="manifest" href="/manifest.json">'
        ]
        
        updated = False
        for link in icon_links:
            if link not in content:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ head
                if '<head>' in content and '</head>' in content:
                    head_start = content.find('<head>') + 6
                    content = content[:head_start] + '\n    ' + link + content[head_start:]
                    updated = True
        
        if updated:
            with open(index_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ index.html –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏–∫–æ–Ω–∫–∞–º–∏")
        else:
            print(f"‚úÖ index.html —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∫–æ–Ω–∫–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ index.html: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé® LinguaScribe - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫")
    print("=" * 60)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
    distribute_icons()
    
    if os.path.exists("android"):
        print(f"\nüì± Android –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω!")
        print(f"üéØ –ò–∫–æ–Ω–∫–∏ Android –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print(f"\n‚ö†Ô∏è  Android –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx cap add android")
    
    return True # Always return True as distribute_icons now handles its own success/failure

if __name__ == "__main__":
    main() 